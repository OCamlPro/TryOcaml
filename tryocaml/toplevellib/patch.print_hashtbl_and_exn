diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/genprintval.ml toplevel/genprintval.ml
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/genprintval.ml	2009-10-26 11:53:16.000000000 +0100
+++ toplevel/genprintval.ml	2012-02-16 13:12:39.297884839 +0100
@@ -45,6 +45,9 @@
     val install_printer :
           Path.t -> Types.type_expr -> (formatter -> t -> unit) -> unit
     val remove_printer : Path.t -> unit
+    val install_printer2 :
+          Path.t -> Types.type_expr -> (Env.t -> Types.type_expr -> t -> Outcometree.out_value) -> unit
+    val remove_printer2 : Path.t -> unit
     val outval_of_untyped_exception : t -> Outcometree.out_value
     val outval_of_value :
           int -> int ->
@@ -52,6 +55,11 @@
           Env.t -> t -> type_expr -> Outcometree.out_value
   end
 
+    (* An abstract type *)
+
+let abstract_type =
+  Ctype.newty (Tconstr (Pident (Ident.create "abstract"), [], ref Mnil))
+
 module Make(O : OBJ)(EVP : EVALPATH with type value = O.t) = struct
 
     type t = O.t
@@ -111,11 +119,12 @@
         (fun x -> Oval_int64 (O.obj x : int64))
     ] : (Path.t * type_expr * (O.t -> Outcometree.out_value)) list)
 
+
     let install_printer path ty fn =
       let print_val ppf obj =
         try fn ppf obj with
-        | exn ->
-           fprintf ppf "<printer %a raised an exception>" Printtyp.path path in
+          | exn ->
+            fprintf ppf "<printer %a raised an exception>" Printtyp.path path in
       let printer obj = Oval_printer (fun ppf -> print_val ppf obj) in
       printers := (path, ty, printer) :: !printers
 
@@ -161,12 +170,29 @@
     and tree_of_label =
       tree_of_qualified (fun lid env -> (Env.lookup_label lid env).lbl_res)
 
-    (* An abstract type *)
+    (* The main printing function *)
 
-    let abstract_type =
-      Ctype.newty (Tconstr (Pident (Ident.create "abstract"), [], ref Mnil))
 
-    (* The main printing function *)
+    let printers2 = ref []
+
+    let install_printer2 path ty fn =
+      printers2 := (path, ty, fn) :: !printers2
+
+    let remove_printer2 path =
+      let rec remove = function
+      | [] -> raise Not_found
+      | (p, ty, fn as printer) :: rem ->
+          if Path.same p path then rem else printer :: remove rem in
+      printers2 := remove !printers2
+
+    let find_printer2 env ty obj =
+      let rec find = function
+      | [] -> raise Not_found
+      | (name, sch, printer) :: remainder ->
+          if Ctype.moregeneral env false sch ty
+          then printer env ty obj
+          else find remainder
+      in find !printers2
 
     let outval_of_value max_steps max_depth check_depth env obj ty =
 
@@ -179,6 +205,9 @@
         try
           find_printer env ty obj
         with Not_found ->
+        try
+          find_printer2 env ty obj
+        with Not_found ->
           match (Ctype.repr ty).desc with
           | Tvar ->
               Oval_stuff "<poly>"
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/genprintval.mli toplevel/genprintval.mli
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/genprintval.mli	2002-04-18 09:27:47.000000000 +0200
+++ toplevel/genprintval.mli	2012-02-16 13:12:46.609921097 +0100
@@ -17,6 +17,8 @@
 open Types
 open Format
 
+val abstract_type : Types.type_expr
+
 module type OBJ =
   sig
     type t
@@ -41,6 +43,9 @@
     val install_printer :
           Path.t -> Types.type_expr -> (formatter -> t -> unit) -> unit
     val remove_printer : Path.t -> unit
+    val install_printer2 :
+          Path.t -> Types.type_expr -> (Env.t -> Types.type_expr -> t -> Outcometree.out_value) -> unit
+    val remove_printer2 : Path.t -> unit
     val outval_of_untyped_exception : t -> Outcometree.out_value
     val outval_of_value :
           int -> int ->
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/opttopdirs.ml toplevel/opttopdirs.ml
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/opttopdirs.ml	2010-01-22 13:48:24.000000000 +0100
+++ toplevel/opttopdirs.ml	2012-02-16 11:16:34.419347861 +0100
@@ -97,8 +97,10 @@
 
 (* Install, remove a printer *)
 
-type 'a printer_type_new = Format.formatter -> 'a -> unit
-type 'a printer_type_old = 'a -> unit
+type 'a printer_type2 = Format.formatter -> Types.type_expr -> 'a -> unit
+type 'a printer_type1 = Format.formatter -> 'a -> unit
+type 'a printer_type0 = 'a -> unit
+
 
 let match_printer_type ppf desc typename =
   let (printer_type, _) =
@@ -122,9 +124,12 @@
     let (path, desc) = Env.lookup_value lid !toplevel_env in
     let (ty_arg, is_old_style) =
       try
-        (match_printer_type ppf desc "printer_type_new", false)
+        (match_printer_type ppf desc "printer_type2", 2)
+      with Ctype.Unify _ ->
+      try
+        (match_printer_type ppf desc "printer_type1", 1)
       with Ctype.Unify _ ->
-        (match_printer_type ppf desc "printer_type_old", true) in
+        (match_printer_type ppf desc "printer_type0", 0) in
     (ty_arg, path, is_old_style)
   with
   | Not_found ->
@@ -139,12 +144,14 @@
   try
     let (ty_arg, path, is_old_style) = find_printer_type ppf lid in
     let v = eval_path path in
-    let print_function =
-      if is_old_style then
-        (fun formatter repr -> Obj.obj v (Obj.obj repr))
-      else
-        (fun formatter repr -> Obj.obj v formatter (Obj.obj repr)) in
-    install_printer path ty_arg print_function
+    match is_old_style with
+      | 0 -> install_printer path ty_arg
+          (fun formatter repr -> Obj.obj v (Obj.obj repr))
+      | 1 -> install_printer path ty_arg
+          (fun formatter repr -> Obj.obj v (Obj.obj repr))
+      | 2 -> install_printer2 path ty_arg
+        (fun formatter ty repr -> Obj.obj v formatter ty (Obj.obj repr))
+      | _ -> assert false
   with Exit -> ()
 
 let dir_remove_printer ppf lid =
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/topdirs.ml toplevel/topdirs.ml
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/topdirs.ml	2010-01-22 13:48:24.000000000 +0100
+++ toplevel/topdirs.ml	2012-02-16 11:16:34.423347882 +0100
@@ -135,8 +135,10 @@
 
 (* Install, remove a printer *)
 
-type 'a printer_type_new = Format.formatter -> 'a -> unit
-type 'a printer_type_old = 'a -> unit
+type 'a printer_type2 = Env.t -> Types.type_expr -> 'a -> Outcometree.out_value
+type 'a printer_type1 = Format.formatter -> 'a -> unit
+type 'a printer_type0 = 'a -> unit
+
 
 let match_printer_type ppf desc typename =
   let (printer_type, _) =
@@ -160,9 +162,12 @@
     let (path, desc) = Env.lookup_value lid !toplevel_env in
     let (ty_arg, is_old_style) =
       try
-        (match_printer_type ppf desc "printer_type_new", false)
+        (match_printer_type ppf desc "printer_type2", 2)
+      with Ctype.Unify _ ->
+      try
+        (match_printer_type ppf desc "printer_type1", 1)
       with Ctype.Unify _ ->
-        (match_printer_type ppf desc "printer_type_old", true) in
+        (match_printer_type ppf desc "printer_type0", 0) in
     (ty_arg, path, is_old_style)
   with
   | Not_found ->
@@ -177,12 +182,13 @@
   try
     let (ty_arg, path, is_old_style) = find_printer_type ppf lid in
     let v = eval_path path in
-    let print_function =
-      if is_old_style then
-        (fun formatter repr -> Obj.obj v (Obj.obj repr))
-      else
-        (fun formatter repr -> Obj.obj v formatter (Obj.obj repr)) in
-    install_printer path ty_arg print_function
+    match is_old_style with
+      | 0 -> install_printer path ty_arg
+          (fun formatter repr -> Obj.obj v (Obj.obj repr))
+      | 1 -> install_printer path ty_arg
+          (fun formatter repr -> Obj.obj v formatter (Obj.obj repr))
+      | 2 -> install_printer2 path ty_arg (Obj.obj v)
+      | _ -> assert false
   with Exit -> ()
 
 let dir_remove_printer ppf lid =
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/topdirs.mli toplevel/topdirs.mli
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/topdirs.mli	2002-04-18 09:27:47.000000000 +0200
+++ toplevel/topdirs.mli	2012-02-16 11:16:34.423347882 +0100
@@ -27,8 +27,9 @@
 val dir_untrace : formatter -> Longident.t -> unit
 val dir_untrace_all : formatter -> unit -> unit
 
-type 'a printer_type_new = Format.formatter -> 'a -> unit
-type 'a printer_type_old = 'a -> unit
+type 'a printer_type2 = Env.t -> Types.type_expr -> 'a -> Outcometree.out_value
+type 'a printer_type1 = Format.formatter -> 'a -> unit
+type 'a printer_type0 = 'a -> unit
 
 (* For topmain.ml. Maybe shouldn't be there *)
 val load_file : formatter -> string -> bool
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/toploop.ml toplevel/toploop.ml
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/toploop.ml	2009-01-25 23:46:15.000000000 +0100
+++ toplevel/toploop.ml	2012-02-16 13:05:23.887725738 +0100
@@ -95,6 +95,8 @@
 
 let install_printer = Printer.install_printer
 let remove_printer = Printer.remove_printer
+let install_printer2 = Printer.install_printer2
+let remove_printer2 = Printer.remove_printer2
 
 (* Hooks for parsing functions *)
 
@@ -435,3 +437,134 @@
   toplevel_env := Compile.initial_env();
   Sys.interactive := false;
   use_silently ppf name
+
+let rec find_type2 env ty =
+  match (Ctype.repr ty).desc with
+    | Tconstr(path, ty_list, _) ->
+      begin
+      let decl = Env.find_type path env in
+      match decl with
+        | {type_kind = Type_abstract; type_manifest = None} ->
+          begin
+            match ty_list with
+                [ty1; ty2] -> (ty1, ty2)
+              | _ -> raise Not_found
+          end
+        | {type_kind = Type_abstract; type_manifest = Some body} ->
+          find_type2 env
+            ( Ctype.apply env decl.type_params body ty_list )
+        | _ -> raise Not_found
+      end
+    | _ -> raise Not_found
+
+let find_type2 env ty =
+  try
+    find_type2 env ty
+  with _ ->
+    (Genprintval.abstract_type, Genprintval.abstract_type)
+
+let rec find_type1 env ty =
+  match (Ctype.repr ty).desc with
+    | Tconstr(path, ty_list, _) ->
+      begin
+      let decl = Env.find_type path env in
+      match decl with
+        | {type_kind = Type_abstract; type_manifest = None} ->
+          begin
+            match ty_list with
+                [ty1] -> ty1
+              | _ -> raise Not_found
+          end
+        | {type_kind = Type_abstract; type_manifest = Some body} ->
+          find_type1 env
+            ( Ctype.apply env decl.type_params body ty_list )
+        | _ -> raise Not_found
+      end
+    | _ -> raise Not_found
+
+let find_type1 env ty =
+  try
+    find_type1 env ty
+  with _ ->
+    Genprintval.abstract_type
+
+let stringers = [
+  Predef.type_int, (fun i -> string_of_int (Obj.magic i));
+  Predef.type_float, (fun i -> string_of_float (Obj.magic i));
+  Predef.type_string, (fun i -> Printf.sprintf "\"%s\"" (String.escaped (Obj.magic i)));
+  Predef.type_char, (fun i -> String.make 1 (Obj.magic i));
+  Predef.type_int32, (fun i -> Int32.to_string (Obj.magic i));
+  Predef.type_int64, (fun i -> Int64.to_string (Obj.magic i));
+]
+
+let rec find_stringer env ty list =
+  match list with
+      [] -> raise Not_found
+    | (ty', stringer) :: tail ->
+      if Ctype.moregeneral env false ty' ty then stringer else find_stringer env ty tail
+
+let print_hashtbl env ty t =
+  let (t1, t2) = find_type2 env ty in
+  let stringer =
+    try
+      find_stringer env t1 stringers
+    with _ -> (fun _ -> "<too complex>")
+  in
+  let list = ref [] in
+  Hashtbl.iter (fun k v ->
+    list := (Oide_ident (stringer k), outval_of_value env (Obj.repr v) t2) :: !list
+  ) t;
+  Oval_record (List.rev !list)
+
+let exn_printer = ref (fun _ _ _ -> raise Genprintval.Not_handled)
+let print_exn env ty exn = !exn_printer env ty exn
+let set_exn_printer printer = exn_printer := printer
+
+let print_queue env ty t =
+  let t1 = find_type1 env ty in
+  let list = ref [] in
+  Queue.iter (fun v ->
+    list := (outval_of_value env (Obj.repr v) t1) :: !list
+  ) t;
+  Oval_list (List.rev !list)
+
+let print_stack env ty t =
+  let t1 = find_type1 env ty in
+  let list = ref [] in
+  Stack.iter (fun v ->
+    list := (outval_of_value env (Obj.repr v) t1) :: !list
+  ) t;
+  Oval_list (List.rev !list)
+
+let print_lazy env ty t =
+  let t1 = find_type1 env ty in
+  if Lazy.lazy_is_val t then
+    let v = Lazy.force t in
+    Oval_constr (Oide_ident "lazy", [outval_of_value env (Obj.repr v) t1])
+  else
+    Oval_stuff "<not evaluated>"
+
+(*
+ #install_printer Toploop.print_hashtbl;;
+ #install_printer Toploop.print_queue;;
+ #install_printer Toploop.print_stack;;
+ #install_printer Toploop.print_lazy;;
+
+ let of_list list =
+  let t = Hashtbl.create 13 in
+  List.iter (fun (k,v) -> Hashtbl.add t k v) list;
+ t;;
+
+of_list [1,1; 2,2 ];;
+of_list [ "a", [1]; "b", [1;2] ];;
+of_list [ (1,1) , [1] ];;
+
+let x = lazy (4 * 4);;
+x;;
+Lazy.force x;;
+x;;
+
+*)
+
+let set_wrap x = Clflags.wrap_constants := x
+
diff -ruN /home/cago/Downloads/ocaml-3.12.1/toplevel/toploop.mli toplevel/toploop.mli
--- /home/cago/Downloads/ocaml-3.12.1/toplevel/toploop.mli	2007-12-04 14:38:58.000000000 +0100
+++ toplevel/toploop.mli	2012-02-16 13:04:33.831477525 +0100
@@ -72,6 +72,10 @@
   Path.t -> Types.type_expr -> (formatter -> Obj.t -> unit) -> unit
 val remove_printer : Path.t -> unit
 
+val outval_of_value : Env.t -> Obj.t -> Types.type_expr -> Outcometree.out_value
+val install_printer2 : Path.t -> Types.type_expr -> (Env.t -> Types.type_expr -> Obj.t -> Outcometree.out_value) -> unit
+val remove_printer2 : Path.t -> unit
+
 val max_printer_depth: int ref
 val max_printer_steps: int ref
 
@@ -110,3 +114,23 @@
 (* Used by Trace module *)
 
 val may_trace : bool ref
+
+val print_exn : Env.t -> Types.type_expr -> exn -> Outcometree.out_value
+val set_exn_printer : (Env.t -> Types.type_expr -> exn -> Outcometree.out_value) -> unit
+
+val print_hashtbl : Env.t -> Types.type_expr -> ('a, 'b) Hashtbl.t -> Outcometree.out_value
+val print_stack : Env.t -> Types.type_expr -> 'a Stack.t -> Outcometree.out_value
+val print_queue : Env.t -> Types.type_expr -> 'a Queue.t -> Outcometree.out_value
+val print_lazy : Env.t -> Types.type_expr -> 'a Lazy.t -> Outcometree.out_value
+
+val set_wrap : bool -> unit
+
+
+
+
+
+
+
+
+
+
